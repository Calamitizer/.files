[
  // all - "key": "[^"]*?"
  // chords - "key": "[^" ]+ [^" ]+"
  // taken alt menu keys: [wertsdfgklcvbm]

  /**
   * x
   * ctrl+x
   * shift+x
   * alt+x
   * ctrl+shift+x
   * ctrl+alt+x
   * shift+alt+x
   * ctrl+shift+alt+x
   */

  /**
   * ctrl: ⎈
   * shift: ⇧
   * alt: ⎇
   * meta: ◆
   */

  /**
   * Commands unbound by default
   * (as opposed to rebindings)
   * TODO: fill out
   *
   * Set
   * - editor.action.goToTypeDefinition
   * - editor.action.joinLines
   *
   * Unset
   * - editor.action.reindentlines
   */

  /**
   * Disabled because it overrides tab snippet jumping...
   */
  // {
  //   "key": "tab",
  //   "command": "editor.action.indentLines",
  //   "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !suggestWidgetVisible",
  // },

  /**
   * swap tab navigation behavior
   * ctrl+tab <-> ctrl+pagedown
   * ctrl+shift+tab <-> ctrl+pageup
   */

  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.openSettingsJson",
  },

  {
    "key": "ctrl+f5",
    "command": "workbench.action.reloadWindow",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+n",
    "command": "explorer.newFile"
  },
  {
    "key": "ctrl+shift+alt+n",
    "command": "explorer.newFolder"
  },
  {
    "key": "ctrl+k t",
    "command": "workbench.action.tasks.terminate",
    "args": "terminateAll"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "key": "ctrl+k ctrl+shift+o",
    "command": "addRootFolder"
  },


  /*
   * alt + ...
   */

  {
    "key": "alt+`",
    "command": "workbench.action.terminal.kill"
  },

  /*
   * whitespace chords
   * alt + q -> ...
   *
   * -> q - indentationToSpaces
   * -> a - indentUsingSpaces
   * -> w - indentationToTabs
   * -> s - indentUsingTabs
   * -> e - detectIndentation
   * -> r - reindentLines
   * -> x - trimTrailingWhitespace
   */

  {
    "key": "alt+q q",
    "command": "editor.action.indentationToSpaces",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q a",
    "command": "editor.action.indentUsingSpaces",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q w",
    "command": "editor.action.indentationToTabs",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q s",
    "command": "editor.action.indentUsingTabs",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q e",
    "command": "editor.action.detectIndentation",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q r",
    "command": "editor.action.reindentlines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+q x",
    "command": "editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },

  /*
   * ctrl + alt + ...
   */

  {
    "key": "ctrl+alt+a",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+alt+s",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+alt+d",
    "command": "editor.action.goToTypeDefinition",
    "when": "editorHasTypeDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+alt+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+u",
    "command": "insert-unicode.insertText",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+i",
    "command": "insert-unicode.fromHexCode",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+0",
    "command": "workbench.action.evenEditorWidths"
  },

  /**
   * Layout chords
   * shift + alt + q ...
   *
   * q - workbench.action.editorLayoutSingle
   * w - workbench.action.editorLayoutTwoColumns
   * e - workbench.action.editorLayoutThreeColumns
   * d - workbench.action.editorLayoutTwoRowsRight
   * a - workbench.action.editorLayoutTwoRows
   * z - workbench.action.editorLayoutThreeRows
   * x - workbench.action.editorLayoutTwoColumnsBottom
   * c - workbench.action.editorLayoutTwoByTwoGrid
   * s - workbench.action.maximizeEditor
   * r - workbench.action.evenEditorWidths
   */


  {
    "key": "shift+alt+q q",
    "command": "workbench.action.editorLayoutSingle",
  },
  {
    "key": "shift+alt+q w",
    "command": "workbench.action.editorLayoutTwoColumns",
  },
  {
    "key": "shift+alt+q e",
    "command": "workbench.action.editorLayoutThreeColumns",
  },
  {
    "key": "shift+alt+q d",
    "command": "workbench.action.editorLayoutTwoRowsRight",
  },
  {
    "key": "shift+alt+q a",
    "command": "workbench.action.editorLayoutTwoRows",
  },
  {
    "key": "shift+alt+q z",
    "command": "workbench.action.editorLayoutThreeRows",
  },
  {
    "key": "shift+alt+q x",
    "command": "workbench.action.editorLayoutTwoColumnsBottom",
  },
  {
    "key": "shift+alt+q c",
    "command": "workbench.action.editorLayoutTwoByTwoGrid",
  },
  {
    "key": "shift+alt+q s",
    "command": "workbench.action.maximizeEditor",
  },
  {
    "key": "shift+alt+q r",
    "command": "workbench.action.evenEditorWidths",
  },

  /*
   * shift + alt + ...
   */

  {
    "key": "shift+alt+a",
    "command": "workbench.files.action.focusOpenEditorsView"
  },
  {
    "key": "shift+alt+z",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  {
    "key": "shift+alt+x",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "shift+alt+f",
    "command": "settings.action.search"
  },
  {
    "key": "shift+alt+c",
    "command": "search.action.focusPreviousSearchResult"
  },
  {
    "key": "shift+alt+v",
    "command": "search.action.focusNextSearchResult"
  },
  {
    "key": "shift+alt+s",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus && !editorReadonly"
  }
]

// shift + alt + ...
// q - workbench.action.focusFirstEditorGroup
// w - workbench.action.focusSecondEditorGroup
// e - workbench.action.focusThirdEditorGroup
// a - workbench.files.action.focusOpenEditorsView
// z - workbench.files.action.focusFilesExplorer
// x - workbench.action.terminal.focus
// f - workbench.action.terminal.focusFindWidget
// c - search.action.focusPreviousSearchResult
// v - search.action.focusNextSearchResult
// workbench.action.focusSideBar
// workbench.action.focusPanel
// workbench.action.problems.focus
