{
  "Prettier-Ignore": {
    "prefix": "pri",
    "body": [
      "// prettier-ignore",
    ],
    "description": "Command Prettier to ignore the next syntactic node",
  },
  "Block comment": {
    "prefix": "blc",
    "body": [
      "",
      "/*",
      "*/",
    ],
  },
  "Comment out React component": {
    "prefix": "cmc",
    "body": [
      "",
      "{/*",
      "*/}",
    ],
    "description": "Comment out a React component (use at the end of the line above, then use alt+down to move the second line below the component)"
  },

  "Copyright Statement": {
    "prefix": "copy",
    "body": "_Copyright (c) 2018, Q-Free Open Roads_",
    "description": "Q-Free copyright statement"
  },

  "Arrow Operator": {
    "prefix": "aro",
    "body": ["($1) => $0"],
    "description": "Creates arrow operator"
  },

  "Component Class": {
    "prefix": "trc",
    "body": [
      "import * as React from 'react';",
      "",
      "import './$1.scss';",
      "",
      "export interface $1Props extends React.HTMLProps<HTMLElement> {}",
      "export interface $1State {}",
      "",
      "export class $1 extends React.Component<$1Props, $1State> {",
      "  public render(): JSX.Element {",
      "    return (<div>Hello $1$0</div>);",
      "  }",
      "}",
      "",
      "export default $1;",
      ""
    ],
    "description": "Create a basic React component class"
  },

  "Functional Component": {
    "prefix": "trf",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface $1Props extends React.HTMLProps<HTMLElement> {",
      "  ",
      "}",
      "",
      "/**",
      " * $0",
      " * ",
      " * _Copyright (c) 2018, Q-Free Open Roads_",
      " */",
      "export const $1 = ({}: $1Props) => (",
      "  <div>$1</div>",
      ");",
      "",
      "export default $1;",
      ""
    ],
    "description": "A stateless, functional React Component"
  },

  "import": {
    "prefix": "imp",
    "body": ["import { $0 } from '$1';"],
    "description": "TypeScript Import Statement"
  },

  "Lifecycle Hooks": {
    "prefix": "trl",
    "body": [
      "componentWillMount() { }",
      "componentDidMount() { }",
      "componentWillReceiveProps(nextProps) { }",
      "shouldComponentUpdate(nextProps, nextState) { }",
      "componentWillUpdate(nextProps, nextState) { }",
      "componentDidUpdate(prevProps, prevState) { }",
      "componentWillUnmount() { }",
      ""
    ],
    "description": "React Component Lifecycle Hooks"
  },

  "Redux Container Connect": {
    "prefix": "trcc",
    "body": [
      "import { connect } from 'react-redux';",
      "import { OtmsStore } from '../../../store';",
      "",
      "/**",
      " * Map Redux store `state` to component `props`",
      " */",
      "function mapStateToProps(state: OtmsStore): $1Props {",
      "  return {",
      "    ${2:property}: state.$3$0",
      "  };",
      "}",
      "",
      "/**",
      " * Map component interactions or `actions` to Redux actions, which",
      " * dispatch Redux `Reducers` - modifying the store.",
      " */",
      "function mapDispatchToProps(dispatch: any) {",
      "  return {",
      "    actions: bindActionCreators(actions, dispatch)",
      "  };",
      "}",
      "",
      "/**",
      " * Since we are using react-redux connect to bind this component as a redux 'container',",
      " * we must export the result of the connect call, rather than the component class itself.",
      " *",
      " * This also means to use the container we have to `import $1 ...;` without the `{}`",
      " * to ensure we get the default, connected export.",
      " */",
      "export default connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")($1);",
      ""
    ],
    "description": "Functions to turn a component into a Redux contaier."
  },

  "Click Handler Type": {
    "prefix": "click",
    "body": [
      "import { EventHandler, MouseEvent } from 'react';",
      "EventHandler<MouseEvent<HTMLElement>>;"
    ],
    "description": "Import statement and type definition for a React Click handler"
  },

  "Test Boilerplate": {
    "prefix": "trt",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "import { shallow } from 'enzyme';",
      "",
      "import { $1 } from './$1';",
      "",
      "test('$1 $2', () => {",
      "  $0",
      "});",
      ""
    ],
    "description": "Starter for Jest test"
  },

  "Redux Epic Boilerplate": {
    "prefix": "epic",
    "body": [
      "import { $1 } from 'otms-types';",
      "import { ActionsObservable, combineEpics } from 'redux-observable';",
      "import { Observable } from 'rxjs';",
      "import { Action, /** Action Creator Factory */ $2, /** REST API URL Generator */$3 } from 'otms-ui-common';",
      "import { OtmsAjax } from 'otms-ui-common/rest/OtmsAjax';",
      "import 'rxjs/add/operator/catch';",
      "import 'rxjs/add/operator/filter';",
      "import 'rxjs/add/operator/map';",
      "import 'rxjs/add/operator/mapTo';",
      "import 'rxjs/add/operator/mergeMap';",
      "",
      "",
      "// This line waits until an action is dispatched to the store before being kicked off.",
      "export const $4 = (action$: ActionsObservable<Action>) => action$.ofType(/** Action to trigger*/$2$3)",
      "  .mergeMap(action => {",
      "    const url = /** REST API URL Generator */$3(action.payload);",
      "    return OtmsAjax.getJSON(url)",
      "      .map(json => {'",
      "        // dispatching action",
      "        return /** Action to kick off */$2$3(json as $1); })",
      "      .catch(error => {",
      "        // If Error, do this",
      "        return Observable.of({",
      "          type: 'LCS_FETCH_ERROR',",
      "          payload: error.xhr.response,",
      "          error: true",
      "        });",
      "      });",
      "  });",
      "export const $5 = combineEpics(",
      "  $4",
      ");",
      "export default $5;"
    ],
    "description":
      "An Epic is a Redux store listener that waits for actions to be kicked off. From this point you can do anything, but this boilerplate assumes that you're going to be doing some REST calls"
  }
}
